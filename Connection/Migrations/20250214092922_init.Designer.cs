// <auto-generated />
using System;
using Connection.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Connection.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250214092922_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.BaseEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Title = "مشهد"
                        },
                        new
                        {
                            Id = 3,
                            Title = "اصفهان"
                        },
                        new
                        {
                            Id = 4,
                            Title = "شیراز"
                        },
                        new
                        {
                            Id = 5,
                            Title = "تبریز"
                        },
                        new
                        {
                            Id = 6,
                            Title = "کرج"
                        },
                        new
                        {
                            Id = 7,
                            Title = "قم"
                        },
                        new
                        {
                            Id = 8,
                            Title = "اهواز"
                        },
                        new
                        {
                            Id = 9,
                            Title = "رشت"
                        },
                        new
                        {
                            Id = 10,
                            Title = "کرمانشاه"
                        },
                        new
                        {
                            Id = 11,
                            Title = "زاهدان"
                        },
                        new
                        {
                            Id = 12,
                            Title = "ارومیه"
                        },
                        new
                        {
                            Id = 13,
                            Title = "یزد"
                        },
                        new
                        {
                            Id = 14,
                            Title = "همدان"
                        },
                        new
                        {
                            Id = 15,
                            Title = "قزوین"
                        },
                        new
                        {
                            Id = 16,
                            Title = "سنندج"
                        },
                        new
                        {
                            Id = 17,
                            Title = "بندرعباس"
                        },
                        new
                        {
                            Id = 18,
                            Title = "زنجان"
                        },
                        new
                        {
                            Id = 19,
                            Title = "ساری"
                        },
                        new
                        {
                            Id = 20,
                            Title = "بوشهر"
                        },
                        new
                        {
                            Id = 21,
                            Title = "مازندران"
                        },
                        new
                        {
                            Id = 22,
                            Title = "گرگان"
                        },
                        new
                        {
                            Id = 23,
                            Title = "کرمان"
                        },
                        new
                        {
                            Id = 24,
                            Title = "خرم آباد"
                        },
                        new
                        {
                            Id = 25,
                            Title = "سمنان"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.BaseEntities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Imagies");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Title = "بنایی"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Title = "برقکاری"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Title = "نقاشی"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Title = "لوله کشی"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Title = "دکوراسیون داخلی"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            ParentId = 1,
                            Title = "گچ کاری"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            ParentId = 1,
                            Title = "آجرچینی"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            ParentId = 3,
                            Title = "رنگزنی دیوار و سقف"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            ParentId = 5,
                            Title = "کاغذ دیواری"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Comments.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AcceptedRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfferedPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("OfferedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SetAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedRequestId")
                        .IsUnique();

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SetAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WantedPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("WantedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 9,
                            CityId = 3,
                            CustomerId = 2,
                            IsDeleted = false,
                            SetAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Title = "درخواست برای کاغذ دیواری خانه",
                            WantedPrice = 10000,
                            WantedTime = new DateTime(2025, 12, 12, 10, 12, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Expert"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.UserBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 10000,
                            CityId = 3,
                            Email = "Admin@Admin.com",
                            FirstName = "Armin",
                            IsDeleted = false,
                            LastName = "Tamadoni",
                            Password = "123456",
                            Phone = "09130609857",
                            RegisteredAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("CategoryExpert", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CategoryExpert");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Customer", b =>
                {
                    b.HasBaseType("App.Domain.Core.Sangaghak.Entities.Users.UserBase");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Balance = 10000,
                            CityId = 2,
                            Email = "Mehdi@Mehdi.com",
                            FirstName = "Mehdi",
                            IsDeleted = false,
                            LastName = "Mortazavi",
                            Password = "123456",
                            Phone = "0912345678",
                            RegisteredAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserName = "mehdi"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Expert", b =>
                {
                    b.HasBaseType("App.Domain.Core.Sangaghak.Entities.Users.UserBase");

                    b.Property<int>("AcceptedRequestId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("PointerIds")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Points")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalRate")
                        .HasColumnType("int");

                    b.ToTable("Experts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Balance = 10000,
                            CityId = 5,
                            Email = "Hassan@Hassan.com",
                            FirstName = "Hassan",
                            IsDeleted = false,
                            LastName = "Hassani",
                            Password = "123456",
                            Phone = "09987654321",
                            RegisteredAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 3,
                            UserName = "hassan",
                            AcceptedRequestId = 0,
                            TotalRate = 0
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.BaseEntities.Image", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Categories.Category", "Category")
                        .WithOne("Image")
                        .HasForeignKey("App.Domain.Core.Sangaghak.Entities.BaseEntities.Image", "CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Requests.Request", "Request")
                        .WithMany("Images")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.UserBase", "User")
                        .WithOne("Image")
                        .HasForeignKey("App.Domain.Core.Sangaghak.Entities.BaseEntities.Image", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Categories.Category", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Categories.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Comments.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Expert", "Expert")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Offer", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Requests.Request", "AcceptedRequest")
                        .WithOne("AcceptedOffer")
                        .HasForeignKey("App.Domain.Core.Sangaghak.Entities.Requests.Offer", "AcceptedRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Expert", "Expert")
                        .WithMany("Offer")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Requests.Request", "Request")
                        .WithMany("Offers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedRequest");

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Request", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Categories.Category", "Category")
                        .WithMany("Requests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.BaseEntities.City", "City")
                        .WithMany("Requests")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Customer", "Customer")
                        .WithMany("Requets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.UserBase", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.BaseEntities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CategoryExpert", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Customer", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.UserBase", null)
                        .WithOne()
                        .HasForeignKey("App.Domain.Core.Sangaghak.Entities.Users.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Expert", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.UserBase", null)
                        .WithOne()
                        .HasForeignKey("App.Domain.Core.Sangaghak.Entities.Users.Expert", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.BaseEntities.City", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Categories.Category", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Requests");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Request", b =>
                {
                    b.Navigation("AcceptedOffer");

                    b.Navigation("Images");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.UserBase", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Requets");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Expert", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Offer");
                });
#pragma warning restore 612, 618
        }
    }
}
