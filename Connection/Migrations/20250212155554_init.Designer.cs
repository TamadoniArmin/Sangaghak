// <auto-generated />
using System;
using Connection.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Connection.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250212155554_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.BaseEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.BaseEntities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Imagies");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Comments.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WantedPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("WantedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Suggest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcceptedRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SetAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SuggestedPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuggestedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedRequestId")
                        .IsUnique();

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Suggests");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.UserBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("UserBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CategoryExpert", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CategoryExpert");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Customer", b =>
                {
                    b.HasBaseType("App.Domain.Core.Sangaghak.Entities.Users.UserBase");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Expert", b =>
                {
                    b.HasBaseType("App.Domain.Core.Sangaghak.Entities.Users.UserBase");

                    b.Property<int>("TotalRate")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.BaseEntities.Image", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Categories.Category", "Category")
                        .WithOne("Image")
                        .HasForeignKey("App.Domain.Core.Sangaghak.Entities.BaseEntities.Image", "CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Requests.Request", "Request")
                        .WithMany("Images")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.UserBase", "User")
                        .WithOne("Image")
                        .HasForeignKey("App.Domain.Core.Sangaghak.Entities.BaseEntities.Image", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Categories.Category", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Categories.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Comments.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Expert", "Expert")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Request", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Categories.Category", "Category")
                        .WithMany("Requests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.BaseEntities.City", "City")
                        .WithMany("Requests")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Customer", "Customer")
                        .WithMany("Requets")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Suggest", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Requests.Request", "AcceptedRequest")
                        .WithOne("AcceptedSugget")
                        .HasForeignKey("App.Domain.Core.Sangaghak.Entities.Requests.Suggest", "AcceptedRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Expert", "Expert")
                        .WithMany("Suggests")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Requests.Request", "Request")
                        .WithMany("Suggests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedRequest");

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.UserBase", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.BaseEntities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CategoryExpert", b =>
                {
                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Users.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Sangaghak.Entities.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.BaseEntities.City", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Categories.Category", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("Requests");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Requests.Request", b =>
                {
                    b.Navigation("AcceptedSugget")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("Suggests");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.UserBase", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Requets");
                });

            modelBuilder.Entity("App.Domain.Core.Sangaghak.Entities.Users.Expert", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Suggests");
                });
#pragma warning restore 612, 618
        }
    }
}
